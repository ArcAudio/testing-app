{"version":3,"sources":["eyeball.png","ii3.png","eyeballit4.jpg","ii2.png","ii1.png","birds1/bgfill.png","birds1/crowpic10.png","birds1/foreground0.png","birds1/bricktexture0.png","index.js"],"names":["style","height","App","sceneSetup","width","el","clientWidth","clientHeight","scene","THREE","camera","position","z","timeNow","Date","now","controls","OrbitControls","renderer","setSize","appendChild","domElement","addCustomSceneObjects","bricktex","load","bricktexture","map","background","birdtex1","birdbg","geometry1","birdtex2","birdfg","geometry2","birdtex3","birds","geometry3","materialb1","depthTest","transparent","materialb2","materialb3","pln1","pln2","pln3","Array","fill","forEach","addstar","addstar2","addstar3","addstar4","add","texture","img1","sizeRand","randFloatSpread","material","size","opacity","geometry","vertices","i","x","Math","random","y","push","setAttribute","star","img3","img4","img5","startAnimationLoop","time2","time","abs","lookAt","children","length","object","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ref","Component","Container","state","isMounted","className","dark","elevation","large","rounded","onClick","setState","React","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.cccd96cc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/eyeball.b62f76e1.png\";","export default __webpack_public_path__ + \"static/media/ii3.324fc83f.png\";","export default __webpack_public_path__ + \"static/media/eyeballit4.f82165cd.jpg\";","export default __webpack_public_path__ + \"static/media/ii2.36f14ff0.png\";","export default __webpack_public_path__ + \"static/media/ii1.7f307da2.png\";","export default __webpack_public_path__ + \"static/media/bgfill.321cace6.png\";","export default __webpack_public_path__ + \"static/media/crowpic10.a3187bc1.png\";","export default __webpack_public_path__ + \"static/media/foreground0.b36c48a4.png\";","export default __webpack_public_path__ + \"static/media/bricktexture0.3306dde5.png\";","import './index.css';\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MathUtils, TetrahedronGeometry } from 'three';\nimport img1 from './eyeball.png';\nimport img2 from './eyeballit4.jpg';\nimport img3 from './ii3.png';\nimport img4 from './ii2.png';\nimport img5 from './ii1.png';\n\nimport birdbg from './birds1/bgfill.png';\nimport birds from './birds1/crowpic10.png';\nimport birdfg from './birds1/foreground0.png';\nimport bricktexture from './birds1/bricktexture0.png';\nimport { Button, Carousel,CarouselItem, Divider, CardMedia, CardContent, Card  } from 'ui-neumorphism'\nimport 'ui-neumorphism/dist/index.css'\nimport { useState, useEffect } from 'react';\n\nconst style = {\n  height: 720 // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n\n  // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n  // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n    );\n    this.camera.position.z = 45; // is used here to set some distance from a cube that is located at z = 0\n    this.timeNow = Date.now();\n\n    // OrbitControls allow a camera to orbit around the object\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n    this.controls = new OrbitControls(this.camera, this.el);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n  };\n\n  // onPointerMove =() => {\n\n  //   if ( event.isPrimary === false ) return;\n\n  //   mouseX = this.el.clientX;\n  //   mouseY = this.el.clientHeight;\n\n  // };\n\n  // Here should come custom code.\n  // Code below is taken from Three.js BoxGeometry example\n  // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n  addCustomSceneObjects = () => {\n\n  const bricktex = new THREE.TextureLoader().load(bricktexture);\n  const materialbg = new THREE.MeshBasicMaterial({map:bricktex})\n\n   //this.scene.background = new THREE.Color( 0x131F3F );\n   this.scene.background = bricktex;\n   //this.scene.fog = new THREE.FogExp2( 0xffffff, 0.0008 );\n   const birdtex1 = new THREE.TextureLoader().load(birdbg);\n   const geometry1 = new THREE.PlaneGeometry(45,45,4,4)\n\n   const birdtex2 = new THREE.TextureLoader().load(birdfg);\n   const geometry2 = new THREE.PlaneGeometry(45,45,4,4)\n\n   const birdtex3 = new THREE.TextureLoader().load(birds);\n   const geometry3 = new THREE.PlaneGeometry(45,45,4,4)\n   //const geometry = new THREE.TorusGeometry(10,3,16,100)\n   const materialb1 = new THREE.MeshBasicMaterial({map:birdtex1, depthTest: false, transparent: true});\n   const materialb2 = new THREE.MeshBasicMaterial({map:birdtex2, depthTest: false, transparent: true});\n   const materialb3 = new THREE.MeshBasicMaterial({map:birdtex3, depthTest: false, transparent: true});\n\n   this.pln1 = new THREE.Mesh(geometry1,materialb1);\n   this.pln2 = new THREE.Mesh(geometry2,materialb2);\n   this.pln3 = new THREE.Mesh(geometry3,materialb3);\n   this.pln1.position.z = -5.3;\n   this.pln2.position.z = -3.2;\n   this.pln3.position.z = -1.1;\n\n\n    Array(5).fill().forEach(this.addstar)\n    Array(5).fill().forEach(this.addstar2)\n    Array(5).fill().forEach(this.addstar3)\n    Array(5).fill().forEach(this.addstar4)\n\n   //const trs()\n   this.scene.add(this.pln1)\n   this.scene.add(this.pln2)\n   this.scene.add(this.pln3)\n\n  };\n\n  addstar = () => {\n\n    const texture = new THREE.TextureLoader().load(img1);\n\n    const sizeRand = THREE.MathUtils.randFloatSpread(60);\n\n    const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n    material.opacity = 0.00;\n    //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n    const geometry = new THREE.BufferGeometry();\n    //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n    //const mat = new THREE.MeshBasicMaterial({map: texture1});\n    //this.star = new THREE.Mesh(geo,mat);\n\n    //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n\n    const vertices = [];\n    for ( let i = 0; i < 500; i ++ ) {\n\n      const x = Math.random() * 2000 - 1000;\n      const y = Math.random() * 2000 - 1000;\n      const z = Math.random() * 2000 - 1000;\n\n      vertices.push( x, y, z );\n\n    }\n\n    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n    //geometry.scale(50,50,50);\n\n\n\n    //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n    this.star = new THREE.Points(geometry, material)\n\n    //this.star.position.set(x,y,z);\n    this.scene.add(this.star)\n  };\n\n  addstar2 = () => {\n    const texture = new THREE.TextureLoader().load(img3);\n\n    const sizeRand = THREE.MathUtils.randFloatSpread(60);\n\n    const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n    material.opacity = 0.00;\n    //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n    const geometry = new THREE.BufferGeometry();\n    //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n    //const mat = new THREE.MeshBasicMaterial({map: texture1});\n    //this.star = new THREE.Mesh(geo,mat);\n\n    //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n\n    const vertices = [];\n    for ( let i = 0; i < 500; i ++ ) {\n\n      const x = Math.random() * 2000 - 1000;\n      const y = Math.random() * 2000 - 1000;\n      const z = Math.random() * 2000 - 1000;\n\n      vertices.push( x, y, z );\n\n    }\n\n    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n    //geometry.scale(50,50,50);\n\n\n\n    //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n    this.star = new THREE.Points(geometry, material)\n\n    //this.star.position.set(x,y,z);\n    this.scene.add(this.star)\n  };\n\n  addstar3 = () => {\n    const texture = new THREE.TextureLoader().load(img4);\n\n    const sizeRand = THREE.MathUtils.randFloatSpread(60);\n\n    const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n    material.opacity = 0.00;\n    //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n    const geometry = new THREE.BufferGeometry();\n    //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n    //const mat = new THREE.MeshBasicMaterial({map: texture1});\n    //this.star = new THREE.Mesh(geo,mat);\n\n    //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n\n    const vertices = [];\n    for ( let i = 0; i < 500; i ++ ) {\n\n      const x = Math.random() * 2000 - 250;\n      const y = Math.random() * 2000 - 250;\n      const z = Math.random() * 2000 - 250;\n\n      vertices.push( x, y, z );\n\n    }\n\n    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n    //geometry.scale(50,50,50);\n\n\n\n    //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n    this.star = new THREE.Points(geometry, material)\n\n    //this.star.position.set(x,y,z);\n    this.scene.add(this.star)\n  };\n\n  addstar4 = () => {\n    const texture = new THREE.TextureLoader().load(img5);\n\n\n    const sizeRand = THREE.MathUtils.randFloatSpread(60);\n\n    const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n    material.opacity = 0.00;\n    //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n    const geometry = new THREE.BufferGeometry();\n    //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n    //const mat = new THREE.MeshBasicMaterial({map: texture1});\n    //this.star = new THREE.Mesh(geo,mat);\n\n    //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n\n    const vertices = [];\n    for ( let i = 0; i < 500; i ++ ) {\n\n      const x = Math.random() * 2000 - 1000;\n      const y = Math.random() * 2000 - 1000;\n      const z = Math.random() * 2000 - 1000;\n\n      vertices.push( x, y, z );\n\n    }\n\n    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n    //geometry.scale(50,50,50);\n\n\n\n    //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n    this.star = new THREE.Points(geometry, material)\n\n    //this.star.position.set(x,y,z);\n    this.scene.add(this.star)\n  };\n\n\n  // addstar = () => {\n  //   const texture1 = new THREE.TextureLoader().load(img1);\n\n  //   const texture2 = new THREE.TextureLoader().load(img3);\n  //   const texture3 = new THREE.TextureLoader().load(img4);\n  //   const texture4 = new THREE.TextureLoader().load(img5);\n\n  //   const sizeRand = THREE.MathUtils.randFloatSpread(50);\n\n  //   const material = new THREE.PointsMaterial( { size: sizeRand, map: texture1, depthTest: false, transparent: true } );\n\n  //   const geometry = new THREE.BufferGeometry();\n  //   const vertices = [];\n  //   for ( let i = 0; i < 10000; i ++ ) {\n\n  //     const x = Math.random() * 2000 - 1000;\n  //     const y = Math.random() * 2000 - 1000;\n  //     const z = Math.random() * 2000 - 1000;\n\n  //     vertices.push( x, y, z );\n  //   }\n\n  //   geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\n  //   for ( let i = 0; i < 3; i ++ )\n  //   {\n  //     var sprite;\n  //     if (i == 0)\n  //     {\n  //       sprite = texture2;\n  //     }\n  //     if (i == 1)\n  //     {\n  //       sprite = texture3;\n  //     }\n  //     if (i == 2)\n  //     {\n  //       sprite = texture4;\n  //     }\n\n  //   }\n\n  //   var material1 = new THREE.PointsMaterial( { size: sizeRand, map: sprite, depthTest: false, transparent: true } );\n  //   this.star = new THREE.Points(geometry, material)\n  //   this.scene.add(this.star)\n  // };\n\n  // randMat = () => {\n\n  // };\n\n  startAnimationLoop = () => {\n\n\n\n    const time2 = this.timeNow;\n    const time = Math.abs((Date.now() - time2) * 0.000009);\n\n    if (time > 0.1)\n    {\n      this.pln1.position.z += 0.0125;\n      this.pln2.position.z += 0.025;\n      this.pln3.position.z += 0.05;\n      this.pln1.material.opacity -= 0.0005;\n      this.pln2.material.opacity -= 0.001;\n      this.pln3.material.opacity -= 0.0015;\n    }\n\n\n    //console.log(time);\n\n\n\n    // this.camera.position.x += ( this.mouseX - this.camera.position.x ) * 0.05;\n\t\t// this.camera.position.y += ( - this.mouseY - this.camera.position.y ) * 0.05;\n\n\t\tthis.camera.lookAt( this.scene.position );\n\n    for ( let i = 0; i < this.scene.children.length; i ++ ) {\n\n      const object = this.scene.children[ i ];\n\n      if ( object instanceof THREE.Points ) {\n\n        object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );\n\n        if (object.material.opacity <= 0.5)\n        {\n          object.material.opacity += 0.001;\n        }\n\n        // if (object.material.opacity >= 0.5)\n        // {\n        //   object.material.opacity -= 0.001;\n        // }\n\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n\n    // The window.requestAnimationFrame() method tells the browser that you wish to perform\n    // an animation and requests that the browser call a specified function\n    // to update an animation before the next repaint\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    // Note that after making changes to most of camera properties you have to call\n    // .updateProjectionMatrix for the changes to take effect.\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\nclass Container extends React.Component {\n  state = { isMounted: true };\n\n  render() {\n    const { isMounted = true } = this.state;\n    return (\n      <>\n      <div className=\"App\">\n\n<Card dark elevation={2}>\n      <header className=\"App-header\">\n\n        <h1>\n          Jayde Marie Bell - Artist Portfolio\n          <Divider dark />\n        </h1>\n\n        <p>\n        <Button dark large rounded>Home</Button>\n        <Button dark large rounded>About</Button>\n        <Button dark large rounded>Contact</Button>\n        <Button onClick={() =>\n            this.setState(state => ({ isMounted: !state.isMounted }))\n          } dark large rounded>Vis</Button>\n        <Divider dark />\n        </p>\n\n      </header>\n      </Card>\n    </div>\n        {/* <button\n          onClick={() =>\n            this.setState(state => ({ isMounted: !state.isMounted }))\n          }\n        >\n          {isMounted ? \"StopVisuals\" : \"StartVisuals\"}\n        </button> */}\n        {isMounted && <App />}\n        {/* {isMounted && <div>Scroll to zoom, drag to rotate</div>} */}\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);\n"],"sourceRoot":""}